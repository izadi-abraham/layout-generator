{"version":3,"sources":["components/RenderLayout.js","components/DropDownList.js","App.js","serviceWorker.js","index.js"],"names":["RenderLayout","props","regNumber","textArray","selectedValue","toLowerCase","split","renderContent","slotNumber","item","switchItem","replace","itemNumber","parseInt","isNaN","j","className","dangerouslySetInnerHTML","__html","DropDownList","for","id","name","defaultValue","onChange","handleChange","value","disabled","hidden","App","console","log","target","setState","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAmDeA,MAhDf,SAAuBC,GAEnB,IAAMC,EAAY,OAEZC,EADKF,EAAMG,cAAcC,cACRC,MAAM,KACzBC,EAAgB,GAChBC,EAAa,EANS,uBAa1B,YAAiBL,EAAjB,+CAA4B,CAAC,IAApBM,EAAmB,QACtBC,EAAaD,EAAKE,QAAQT,EAAW,IACrCU,EAAaC,SAASJ,EAAM,IAGhC,OAFIK,MAAMF,KAAaA,EAAa,GAE5BF,GACN,IAAK,KACH,IAAK,IAAIK,EAAI,EAAGA,EAAIH,EAAYG,IAC9BR,GAbS,yCAAwCC,EAAxC,eAcTA,GAAa,EAEf,MACF,IAAK,IACH,IAAK,IAAIO,EAAI,EAAGA,EAAIH,EAAYG,IAC9BR,GAlBQ,yCAAwCC,EAAxC,eAmBRA,GAAa,EAEf,MACF,IAAK,KACH,IAAK,IAAIO,EAAI,EAAGA,EAAIH,EAAYG,IAC9BR,GAvBS,0CAAyCC,EAAzC,eAwBTA,GAAa,IAlCK,kFA2C1B,OAAO,yBAAKQ,UAAU,WAAWC,wBAAyB,CAACC,OAAQX,M,MCrBxDY,MAtBf,SAAsBlB,GACpB,OACE,yBAAKe,UAAU,cACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACf,2BAAOI,IAAI,iBAAX,+CACE,4BAAQC,GAAG,gBAAgBL,UAAU,eAAeM,KAAK,iBAAiBC,aAAa,OAAOC,SAAUvB,EAAMwB,cAC5G,4BAAQC,MAAM,OAAOC,UAAQ,EAACC,QAAM,GAApC,KACA,4BAAQF,MAAM,MAAd,MACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,gBAAd,qBCaGG,E,YAzBb,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KAOPwB,aAAe,SAACrB,GAEf0B,QAAQC,IAAI,UAAW3B,EAAc4B,OAAON,OAC5C,EAAKO,SAAS,CAAC7B,cAAeA,EAAc4B,OAAON,SARnD,EAAKQ,MAAQ,CACX9B,cAAe,IAJA,E,sEAgBjB,OACE,yBAAKY,UAAU,mBACb,kBAAC,EAAD,CAAcS,aAAcU,KAAKV,eACjC,kBAAC,EAAD,CAAcrB,cAAe+B,KAAKD,MAAM9B,qB,GApB9BgC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.93f48a9c.chunk.js","sourcesContent":["import React from \"react\";\nimport './RenderLayout.scss';\n\nfunction RenderLayout (props) {\n\n    const regNumber = /\\d+/g;\n    let text = props.selectedValue.toLowerCase();\n    const textArray = text.split(\"/\");\n    let renderContent = \"\";\n    let slotNumber = 1;\n\n    const renderSM = () => `<div class='sm col-6'><h3>Slot ${slotNumber}</h3></div>`;\n    const renderL = () => `<div class='l col-12'><h3>Slot ${slotNumber}</h3></div>`;\n    const renderXL = () => `<div class='xl col-12'><h3>Slot ${slotNumber}</h3></div>`;\n\n\n    for (let item of textArray) {\n      let switchItem = item.replace(regNumber, '');\n      let itemNumber = parseInt(item, 10);\n      if (isNaN(itemNumber)) itemNumber = 1;\n\n      switch (switchItem) {\n        case 'sm':\n          for (let j = 0; j < itemNumber; j++) {\n            renderContent += renderSM();\n            slotNumber +=1;\n          }\n          break;\n        case 'l':\n          for (let j = 0; j < itemNumber; j++) {\n            renderContent += renderL();\n            slotNumber +=1;\n          }\n          break;\n        case 'xl':\n          for (let j = 0; j < itemNumber; j++) {\n            renderContent += renderXL();\n            slotNumber +=1;\n          }\n          break;\n        default:\n      }\n    }\n\n\n\n    return <div className=\"row main\" dangerouslySetInnerHTML={{__html: renderContent}}/>;\n\n\n}\n\nexport default RenderLayout;","import React from \"react\";\nimport './DropDownList.scss';\n\nfunction DropDownList(props) {\n  return (\n    <div className=\"row header\">\n      <div className=\"col\">\n        <div className=\"form-group\">\n        <label for=\"select-layout\">Please select the Layout Generator's value:</label>\n          <select id=\"select-layout\" className=\"form-control\" name=\"drop down list\" defaultValue=\"none\" onChange={props.handleChange}>\n            <option value=\"none\" disabled hidden>-</option>\n            <option value=\"xl\">XL</option>\n            <option value=\"2XL\">2XL</option>\n            <option value=\"4L\">4L</option>\n            <option value=\"XL/2L\">XL/2L</option>\n            <option value=\"XL/L/2SM\">XL/L/2SM</option>\n            <option value=\"4SM/L/2XL\">4SM/L/2XL</option>\n            <option value=\"2SM/XL/L/4SM\">2SM/XL/L/4SM</option>\n          </select>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DropDownList;","import React from 'react';\nimport RenderLayout from './components/RenderLayout';\nimport DropDownList from './components/DropDownList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedValue: '',\n    };\n  }\n\n   handleChange = (selectedValue) => {\n\n    console.log(\"change:\", selectedValue.target.value);\n    this.setState({selectedValue: selectedValue.target.value});\n\n  };\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <DropDownList handleChange={this.handleChange}/>\n        <RenderLayout selectedValue={this.state.selectedValue}/></div>\n    );\n  }\n}\n\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.min'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}